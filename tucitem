import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd

class CombinacaoTUC:
    def __init__(self, root):
        self.root = root
        self.root.title("Verificador de Combinações TUC")
        
        # Carregar dados do Excel
        try:
            self.df = pd.read_excel("dados_tuc.xlsx", engine='openpyxl')
        except FileNotFoundError:
            messagebox.showerror("Erro", "Arquivo dados_tuc.xlsx não encontrado!")
            self.root.destroy()
            return
        
        self.create_widgets()
    
    def create_widgets(self):
        main_frame = ttk.Frame(self.root, padding=20)
        main_frame.grid(row=0, column=0, sticky="nsew")
        
        # Campos de entrada
        campos = ['TUC', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6']
        self.entries = {}
        
        for idx, campo in enumerate(campos):
            lbl = ttk.Label(main_frame, text=f"{campo}:")
            lbl.grid(row=idx, column=0, padx=5, pady=5, sticky="e")
            
            entry = ttk.Entry(main_frame, width=15)
            entry.grid(row=idx, column=1, padx=5, pady=5)
            self.entries[campo] = entry
        
        # Botão de verificação
        btn_verificar = ttk.Button(
            main_frame, 
            text="Verificar Combinação", 
            command=self.verificar_combinacao
        )
        btn_verificar.grid(row=len(campos), column=0, columnspan=2, pady=15)
        
        # Área de resultado
        self.txt_resultado = tk.Text(
            main_frame, 
            height=8, 
            width=50,
            wrap=tk.WORD,
            state='disabled'
        )
        self.txt_resultado.grid(row=len(campos)+1, column=0, columnspan=2)
    
    def validar_entradas(self):
        valores = {}
        for campo, entry in self.entries.items():
            valor = entry.get().strip()
            if not valor:
                messagebox.showwarning("Aviso", f"Campo {campo} vazio!")
                return None
            try:
                # Remover $ e converter para inteiro
                valores[campo] = int(valor.replace('$', ''))
            except ValueError:
                messagebox.showwarning("Aviso", f"Valor inválido em {campo}!")
                return None
        return valores
    
    def verificar_combinacao(self):
        valores = self.validar_entradas()
        if not valores:
            return
        
        # Procurar combinação no DataFrame
        mask = (
            (self.df['TUC'] == valores['TUC']) &
            (self.df['A1'] == valores['A1']) &
            (self.df['A2'] == valores['A2']) &
            (self.df['A3'] == valores['A3']) &
            (self.df['A4'] == valores['A4']) &
            (self.df['A5'] == valores['A5']) &
            (self.df['A6'] == valores['A6'])
        )
        
        resultados = self.df[mask]
        
        self.txt_resultado.config(state='normal')
        self.txt_resultado.delete(1.0, tk.END)
        
        if not resultados.empty:
            self.txt_resultado.insert(tk.END, "Combinação encontrada!\n\n")
            self.txt_resultado.insert(tk.END, resultados.to_string(index=False))
        else:
            self.txt_resultado.insert(tk.END, "Combinação NÃO encontrada na planilha!")
        
        self.txt_resultado.config(state='disabled')

if __name__ == "__main__":
    root = tk.Tk()
    app = CombinacaoTUC(root)
    root.mainloop()
    
